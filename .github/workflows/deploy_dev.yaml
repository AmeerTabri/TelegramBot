name: polybot deploy_dev

on:
  push:
    branches:
      - dev

  workflow_dispatch:

env:
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  deploy_dev:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_DEV_HOST: ${{ secrets.EC2_DEV_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          cat > ~/.ssh/config << EOF
          Host ec2
              HostName $EC2_DEV_HOST
              User $EC2_USERNAME
              IdentityFile ~/.ssh/private_key
              StrictHostKeyChecking no
          EOF

      - name: Create .env.dev from secrets and constants
        run: |
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_DEV }}" > .env.dev
          echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET_DEV }}" >> .env.dev
          echo "BOT_APP_URL=https://dev.ameer.fursa.click" >> .env.dev
          echo "EC2_YOLO=10.0.1.195" >> .env.dev
          echo "AWS_REGION=us-east-1" >> .env.dev

      - name: Upload .env.dev to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/private_key .env.dev ec2:/home/ubuntu/${REPO_NAME}/.env.dev

      - name: Copy script to EC2
        run: |
          ssh ec2 "if [ -d ~/${REPO_NAME} ]; then cd ~/${REPO_NAME} && git fetch origin dev && git checkout dev && git reset --hard origin/dev; else git clone --branch dev ${REPO_URL} ~/${REPO_NAME}; fi"

      - name: Execute script on EC2
        run: |
          ssh ec2 "cd $REPO_NAME && bash deploy_dev.sh"
