name: Polybot Deploy Dev

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
    secrets:
      EC2_HOST:
        required: true
      EC2_USERNAME:
        required: true
      EC2_SSH_KEY:
        required: true
      TELEGRAM_BOT_TOKEN:
        required: true
      AWS_S3_BUCKET:
        required: true

jobs:
  deploy_dev:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          cat > ~/.ssh/config << EOF
          Host ec2
              HostName $EC2_HOST
              User $EC2_USERNAME
              IdentityFile ~/.ssh/private_key
              StrictHostKeyChecking no
          EOF

      - name: Create .env.dev with image and secrets
        run: |
          echo "TAG=${{ github.run_number }}" > .env.dev 
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env.dev
          echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env.dev
          echo "BOT_APP_URL=https://dev.ameer.fursa.click" >> .env.dev
          echo "EC2_YOLO=10.0.1.195" >> .env.dev
          echo "AWS_REGION=us-east-1" >> .env.dev

      - name: Upload .env.dev to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/private_key .env.dev ec2:/home/ubuntu/TelegramBot/.env.prod

      - name: Clone or update TelegramBot repo on EC2
        env:
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
        run: |
          ssh ec2 "if [ -d ~/TelegramBot ]; then cd ~/TelegramBot && git fetch origin dev && git checkout dev && git reset --hard origin/dev; else git clone --branch dev $REPO_URL ~/TelegramBot; fi"

      - name: Deploy using Docker Compose
        run: |
          ssh ec2 << 'EOF'
            cd ~/TelegramBot
            docker compose -f docker-compose.dev.yaml pull
            docker compose -f docker-compose.dev.yaml down
            docker compose -f docker-compose.dev.yaml up -d
          EOF
